#include "../include/datatypes.h"

#include <iostream>

using namespace std;

int main() {
    cout << "Test Datatypes" << endl;

    // RowVector Test

    vit_float v1_data[8] = {-29.097, -30.119, -42.401, -30.664, -10.432, 89.171, 11.699, -27.104};
    RowVector v1(v1_data, 8);
    cout << "### v1" << endl;
    v1.print();

    vit_float v2_data[8] = {71.853, 29.233, -67.602, 98.732, -14.992, -28.455, 97.492, -31.244};
    RowVector v2(v2_data, 8);
    cout << "### v2" << endl;
    v2.print();

    RowVector v3;
    cout << "### empty v3" << endl;
    v3.print();

    v3 = v1 + v2;
    cout << "### v3 = v1 + v2" << endl;
    v3.print();

    // Matrix Test

    vit_float m1_data[4*6] = {
        -59.589, -14.656,  52.655,  38.644, -47.069,  75.625,
          1.719, -15.885,  50.863,  75.472,  63.460,  65.903,
        -37.876,  54.595, -60.876,  -7.141, -32.860, -92.725,
         33.634,   2.332,  65.897, -58.664,  67.653,  -6.423
    };
    Matrix m1(m1_data, 4*6, 4, 6);
    cout << "### m1" << endl;
    m1.print();

    vit_float m2_data[4*6] = {
         95.322, -28.353,  40.903,  70.296,  17.428,  22.653,
        -89.960,  31.829, -52.580, -88.851,  53.094, -84.483,
         61.754,  65.132, -97.260,   1.398,  50.806,  40.627,
         33.549, -72.269, -30.765, -55.088, -86.918, -46.935
    };
    Matrix m2(m2_data, 4*6, 4, 6);
    cout << "### m2" << endl;
    m2.print();

    Matrix m3(std::move(m1));
    cout << "### m3(move m1)" << endl;
    m3.print();
    cout << "### empty m1" << endl;
    m1.print();

    m3 += m2;
    cout << "### m3 += m2" << endl;
    m3.print();

    // Tensor Test

    vit_float t1_data[2*4*6] = {
         54.665,  92.334, -41.184, -56.388, -83.746,  97.491,
        -95.249, -94.598, -57.893, -30.080, -23.241, -21.483,
        -10.051,  44.251,  14.194, -78.539, -32.985, -23.261,
        -43.994,  41.016,  51.537, -51.665, -14.546,  69.366,

         17.303,  19.116,  69.371,  73.083,  86.205, -77.038,
          9.442,  77.988, -67.148,  16.675, -74.900,  -9.108,
        -61.493,  99.395,  59.423,  36.288,  71.736,  37.269,
        -73.396, -87.007,  45.153, -50.039, -59.406,  -5.420
    };
    Tensor t1(t1_data, 2*4*6, 2, 4, 6);
    cout << "### t1" << endl;
    t1.print();

    vit_float t2_data[2*4*6] = {
          8.368, -39.310,  22.785,  87.886, -96.594,  12.895,
         33.900, -81.782, -13.032, -43.111,  74.267,   9.669,
         96.745,  41.254,  20.893,   9.241, -60.866,  53.146,
          6.667,  76.580, -47.514,  23.998, -23.894, -71.611,

        -50.883,  39.598, -80.677, -35.449,  46.003, -64.017,
        -48.955, -89.550, -54.324,  93.355,  44.074,  -2.492,
        -66.545,  93.101,   2.386,  19.354,  61.906,  67.442,
        -57.297, -18.067,  94.752, -47.778, -98.704, -94.915
    };
    Tensor t2(t2_data, 2*4*6, 2, 4, 6);
    cout << "### t2" << endl;
    t2.print();

    Tensor t3;
    cout << "### empty t3" << endl;
    t3.print();

    t3.copy_tensor(t1);
    cout << "### t3 = copy t1" << endl;
    t3.print();
    cout << "### t1 is still full" << endl;
    t1.print();

    t3 += t2;
    cout << "### t3 += t2" << endl;
    t3.print();

    // PictureBatch Test

    vit_float p1_data[3*2*6*7] = {
         67.251, -99.203, -83.811, -15.065,  80.303, -26.001,  63.594,
         92.634,   0.208,  63.326, -60.198, -97.090,  85.622,  45.546,
         45.043,  23.409,  13.478, -70.482,  63.763,  92.178,  26.524,
         -1.301, -53.802, -42.550, -40.642,  47.498,  46.393,  98.169,
         78.633,  49.033, -43.482,  56.448,  10.456, -61.811, -88.052,
        -10.834,  93.525,   0.984,  57.382, -67.269, -65.073,  80.396,

        -26.448,  24.838, -96.671, -56.149, -28.197, -62.396, -46.201,
        -80.199, -72.638,  47.337, -94.138,  48.608,  50.975,  96.878,
         56.092, -90.274, -89.619, -81.397,  32.122,  19.937, -58.615,
         53.765,  28.106,  17.629,  -2.331, -88.829,  12.010,  60.007,
        -58.695,  62.372, -93.641,  14.446,  55.345,  89.123,  78.491,
         36.987, -39.717, -56.269,  -2.215,  97.337,  63.103, -90.467,



         45.792, -29.775,  13.843, -66.341, -65.667,  71.474, -68.975,
         31.106, -42.757,  17.914,  45.254, -74.464, -98.312,   6.074,
        -74.964, -44.961, -24.498,  15.162,  24.772,  16.541,  59.175,
        -74.799, -77.604,  55.793, -86.845,  98.999,  46.843,  71.966,
        -33.872,  81.425,  85.972, -26.812,  38.682,  26.370, -77.259,
        -11.239, -61.887, -28.243,  58.278,  32.932,  63.740, -30.370,

         75.191,  51.375, -77.584,  45.985, -26.844, -10.790,  -2.348,
        -33.150,   3.499,  76.343,  -1.324,  68.295, -66.596,  19.019,
        -14.386,  93.246,  24.160, -57.758,  20.151, -93.420, -58.029,
         93.366,  23.160, -71.441, -90.255, -34.490,  57.833, -20.700,
         14.914, -71.460, -83.868,   7.237, -33.952,   2.983,  92.413,
        -15.358,  48.813, -41.905, -41.408, -78.568, -29.166, -41.117,



         23.926, -95.110,  41.971,  54.610, -97.046,  28.884,  78.525,
        -62.133, -85.168,  37.125,   0.900, -46.636,   6.997,  66.356,
         48.956,  20.914,  46.836, -65.795,  38.720,  -7.274, -73.016,
        -93.776,  87.506, -62.349,  98.789, -83.301, -13.875, -97.951,
         14.367, -34.019,  33.246,  63.515,  35.752, -82.741,  56.636,
        -35.824, -98.667,  48.949,  66.206, -16.241, -47.059, -90.585,

         19.969, -53.658,  59.599,   2.907, -98.460, -94.984, -26.203,
         58.173, -65.110, -24.501,  24.277,  93.118, -55.305, -87.981,
         -2.387,  62.405, -52.866, -53.186,  45.858,  -1.572,  40.652,
        -24.420,  -9.805, -68.093, -89.232,  15.431,  21.055, -78.904,
         33.465,  57.625,  62.655, -15.862, -82.519,   9.140,  76.370,
        -59.554,  87.401,  96.874,  54.824, -89.558, -62.218, -60.382
    };
    PictureBatch p1(p1_data, 3*2*6*7, 3, 2, 6, 7);
    cout << "### p1" << endl;
    p1.print();

    PictureBatch p2;
    cout << "### empty p2" << endl;
    p2.print();

    p2 = std::move(p1);
    cout << "### p2 = move p1" << endl;
    p2.print();
    cout << "### empty p1" << endl;
    p1.print();

    vit_float pf_data[4*6*3*2] = {
        -54.233,  -5.827,
         73.821, -76.951,
          6.950,  63.083,

        -97.459,  13.402,
        -28.786,  61.376,
          9.980, -92.546,

         -7.778, -72.212,
        -58.744,  81.150,
         95.123, -40.775,

        -33.181,  48.122,
        -35.291, -79.844,
        -46.619,   0.944,

         58.897,  98.628,
         74.737,   6.165,
        -43.859, -61.159,

         38.739,  33.723,
         61.026,  13.951,
        -30.936,  49.795,



        -26.917, -91.570,
        -40.216,  37.631,
         74.750, -15.619,

        -30.045,  25.116,
          8.466,  63.469,
         87.198, -20.008,

        -22.795, -17.059,
          0.503, -16.883,
        -52.937,  16.999,

        -20.482, -24.346,
          8.426,  82.428,
        -99.365, -84.675,

         73.118,  63.678,
        -25.345,  67.247,
        -98.295, -85.439,

        -81.087, -18.596,
        -88.685,  79.543,
         84.746, -88.232,



         70.365, -44.160,
         92.645, -65.936,
         61.047,   6.225,

         36.960,  78.550,
         28.571,  51.655,
        -95.582,  28.942,

        -15.374,  44.868,
         10.837, -52.254,
        -41.294, -41.951,

         23.254, -14.562,
        -81.810, -82.830,
        -35.780, -92.676,

         39.765, -85.416,
         31.916, -22.328,
         -5.014,  65.922,

         57.638,  71.860,
         44.726, -79.994,
         70.481,  64.900,



        -21.280,  80.970,
        -90.973,  51.751,
        -51.179, -92.647,

         79.256, -47.168,
          9.359,  88.055,
         96.055,  -2.318,

        -62.561,  75.481,
        -68.645, -66.191,
         20.586, -20.849,

         66.840,  18.402,
        -29.040,  77.691,
          1.970, -48.897,

        -80.743, -68.602,
        -30.985, -60.492,
         -8.219,  84.256,

        -56.415, -45.184,
         62.910,  -5.793,
         27.740, -78.740
    };
    PictureBatch pf(pf_data, 4*6*3*2, 4, 6, 3, 2);
    cout << "### pf" << endl;
    pf.print();

    Tensor tf;
    pf.flatten_to_tensor(tf);
    cout << "### tf" << endl;
    tf.print();

    PictureBatch p_pad;
    pf.get_pad(p_pad, 4, 3);
    cout << "### p_pad" << endl;
    p_pad.print();

    // PredictionBatch Test

    vit_float pred_data[8*1*10] = {
          0.487,  -0.775,   0.343,   0.172,   0.269,  -0.909,   0.533,   0.527,   0.698,  -0.585,

         -0.113,   0.917,   0.612,   0.888,   0.975,   0.658,   0.938,  -0.218,  -0.023,   0.677,

          0.633,  -0.197,   0.995,  -0.397,  -0.472,   0.347,   0.588,   0.622,  -0.534,  -0.250,

          0.230,   0.854,   0.232,  -0.259,  -0.137,   0.317,  -0.048,   0.358,  -0.338,  -0.779,

         -0.063,  -0.052,  -0.672,  -0.882,  -0.192,   0.325,   0.975,  -0.905,   0.705,   0.064,

          0.581,  -0.916,  -0.994,   0.128,   0.481,  -0.037,   0.991,  -0.303,   0.696,  -0.267,

          0.550,  -0.442,   0.635,   0.729,   0.381,  -0.345,  -0.310,  -0.304,  -0.046,  -0.087,

         -0.974,  -0.144,  -0.852,  -0.738,   0.810,  -0.604,   0.946,  -0.223,   0.967,   0.753
    };
    Tensor pred_tensor(pred_data, 8*1*10, 8, 1, 10);
    cout << "### pred_tensor" << endl;
    pred_tensor.print();

    PredictionBatch pred(pred_tensor);
    cout << "### pred" << endl;
    pred.print();

    return 0;
}
