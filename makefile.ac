# Compiler and Flags
CC := nvc++
NVHPC_INCLUDE_PATH := /leonardo/prod/spack/5.2/install/0.21/linux-rhel8-icelake/gcc-8.5.0/nvhpc-24.3-v63z4inohb4ywjeggzhlhiuvuoejr2le/Linux_x86_64/24.3
CUDA_INCLUDE_PATH := $(NVHPC_INCLUDE_PATH)/cuda/12.3/include

export LD_LIBRARY_PATH=/leonardo/prod/spack/5.2/install/0.21/linux-rhel8-icelake/gcc-8.5.0/nvhpc-24.3-v63z4inohb4ywjeggzhlhiuvuoejr2le/Linux_x86_64/24.3/cuda/12.3/targets/x86_64-linux/lib/stubs:$LD_LIBRARY_PATH

CXXFLAGS := -std=c++11 -O3 -I$(CUDA_INCLUDE_PATH)
OMPFLAGS := -mp -c -I$(CUDA_INCLUDE_PATH)

# OpenACC / GPU Specific Compiler and Flags
ACCFLAGS := -mp -acc -gpu=cc80,managed,lineinfo -Minfo=acc  ###-Minline=1000
LINKFLAGS := -I$(CUDA_INCLUDE_PATH) -lcudart -lcublas -lcufft -lcusolver -lm -lcudart -cudalib=nvtx3  # Linking CUDA runtime

# Directories
BIN_FOLDER := bin
OBJ_FOLDER := bin/obj
SRC_FOLDER := src

OMP_BIN_FOLDER := omp_bin
OMP_OBJ_FOLDER := omp_bin/obj
OMP_SRC_FOLDER := omp_src

ACC_BIN_FOLDER := acc_bin
ACC_OBJ_FOLDER := acc_bin/obj
ACC_SRC_FOLDER := acc_src

TEST_BIN_FOLDER := test_bin
TEST_OBJ_FOLDER := test_bin/obj
TEST_SRC_FOLDER := test_src

# All target (with optional OpenMP and OpenACC executables)
all: vit vit_omp vit_acc

# Clean build
clean:
	# Remove all object and binary directories
	rm -rf $(BIN_FOLDER) $(OBJ_FOLDER) $(OMP_BIN_FOLDER) $(OMP_OBJ_FOLDER) \
		$(ACC_BIN_FOLDER) $(ACC_OBJ_FOLDER) $(TEST_BIN_FOLDER) $(TEST_OBJ_FOLDER) \
		./out_comparison ./test_files

# OBJs (for CPU build using standard g++)
$(OBJ_FOLDER)/%.o: $(SRC_FOLDER)/%.cpp
	@mkdir -p $(OBJ_FOLDER)
	$(CC) -c $(CXXFLAGS) $^ -o $@

# Executable for CPU
$(BIN_FOLDER)/vit.exe: $(OBJ_FOLDER)/datatypes.o $(OBJ_FOLDER)/modules.o $(OBJ_FOLDER)/mlp.o \
	$(OBJ_FOLDER)/conv2d.o $(OBJ_FOLDER)/attention.o $(OBJ_FOLDER)/block.o $(OBJ_FOLDER)/patch_embed.o \
	$(OBJ_FOLDER)/vision_transformer.o $(OBJ_FOLDER)/utils.o $(OBJ_FOLDER)/main.o
	@mkdir -p $(BIN_FOLDER)
	$(CC) $(CXXFLAGS) $^ -o $@

# OBJs for OpenMP Build
$(OMP_OBJ_FOLDER)/%.o: $(OMP_SRC_FOLDER)/%.cpp
	@mkdir -p $(OMP_OBJ_FOLDER)
	$(CC) -c $(CXXFLAGS) $(OMPFLAGS) $^ -o $@

# Executable for OpenMP Build
$(OMP_BIN_FOLDER)/vit.exe: $(OMP_OBJ_FOLDER)/datatypes.o $(OMP_OBJ_FOLDER)/modules.o \
	$(OBJ_FOLDER)/mlp.o $(OMP_OBJ_FOLDER)/conv2d.o $(OMP_OBJ_FOLDER)/attention.o \
	$(OBJ_FOLDER)/block.o $(OBJ_FOLDER)/patch_embed.o $(OMP_OBJ_FOLDER)/vision_transformer.o \
	$(OBJ_FOLDER)/utils.o $(OBJ_FOLDER)/main.o
	@mkdir -p $(OMP_BIN_FOLDER)
	$(CC) $(CXXFLAGS) $(OMPFLAGS) $^ -o $@

# OBJs for OpenACC Build (GPU)
$(ACC_OBJ_FOLDER)/%.o: $(ACC_SRC_FOLDER)/%.cpp
	@mkdir -p $(ACC_OBJ_FOLDER)
	$(CC) -c $(ACCFLAGS) $^ -o $@

# Executable for OpenACC Build (GPU)
$(ACC_BIN_FOLDER)/vit.exe: $(ACC_OBJ_FOLDER)/datatypes.o $(ACC_OBJ_FOLDER)/modules.o \
	$(OBJ_FOLDER)/mlp.o $(ACC_OBJ_FOLDER)/conv2d.o $(ACC_OBJ_FOLDER)/attention.o \
	$(OBJ_FOLDER)/block.o $(OBJ_FOLDER)/patch_embed.o $(ACC_OBJ_FOLDER)/vision_transformer.o \
	$(OBJ_FOLDER)/utils.o $(OBJ_FOLDER)/main.o
	@mkdir -p $(ACC_BIN_FOLDER)
	$(CC) $(ACCFLAGS) $^ -o $@ $(LINKFLAGS)

# Test OBJs (same for CPU, OpenMP, or OpenACC)
$(TEST_OBJ_FOLDER)/%.o: $(TEST_SRC_FOLDER)/%.cpp
	@mkdir -p $(TEST_OBJ_FOLDER)
	$(CC) -c $(CXXFLAGS) $^ -o $@

# Test Executables (CPU Build)
$(TEST_BIN_FOLDER)/test_%.exe: $(OBJ_FOLDER)/datatypes.o $(OBJ_FOLDER)/modules.o $(OBJ_FOLDER)/mlp.o \
	$(OBJ_FOLDER)/conv2d.o $(OBJ_FOLDER)/attention.o $(OBJ_FOLDER)/block.o \
	$(OBJ_FOLDER)/patch_embed.o $(OBJ_FOLDER)/vision_transformer.o \
	$(OBJ_FOLDER)/utils.o $(OBJ_FOLDER)/main.o $(TEST_OBJ_FOLDER)/%.o
	@mkdir -p $(TEST_BIN_FOLDER)
	$(CC) $(CXXFLAGS) $^ -o $@

